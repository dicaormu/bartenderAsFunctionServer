version: 0.2
env:
  variables:
    # This S3 bucket is used to store the packaged Lambda deployment bundle.
    # Make sure to provide a valid S3 bucket name (it must exist already).
    # The CodeBuild IAM role must allow write access to it.
    # S3_BUCKET: "ArtifactStoreBucket"
    PACKAGE: "bartenderAsFunctionServer"

phases:
  install:
    commands:
      # AWS Codebuild Go images use /go for the $GOPATH so copy the
      # application source code into that directory structure.
      - mkdir -p "/go/src/$(dirname ${PACKAGE})"
      - ls "${CODEBUILD_SRC_DIR}"
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/${PACKAGE}"
      # Print all environment variables (handy for AWS CodeBuild logs)
      - env
      # Install golint
      - go get -u github.com/golang/lint/golint
      # Install testify
      - go get github.com/stretchr/testify
      - go get github.com/fatih/structs

  pre_build:
    commands:
      # Make sure we're in the project directory within our GOPATH
      - cd "/go/src/${PACKAGE}"
      # Fetch all dependencies
      - go get ./...
      # Ensure that the code passes all lint tests
      - golint -set_exit_status
      # Check for common Go problems with 'go vet'
      - go vet ./...
      # Run all tests included with the application
      - go test ./...

  build:
    commands:
      # Build the go application TODO bash ou GB
      - ./build.sh
      # copy infra database creation file in S3
      - aws cloudformation package  --template-file pipeline/database.yml --s3-bucket ${S3_BUCKET} --output-template-file database-pipeline.yml
      # Package the application with AWS SAM
      - aws cloudformation package --template-file sam.yaml --s3-bucket ${S3_BUCKET} --output-template-file packaged.yml

artifacts:
  files:
  - packaged.yml
  - database-pipeline.yml